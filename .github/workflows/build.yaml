# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read
  checks: write
  pull-requests: write
  issues: write
  packages: write

env:
  CARGO_TERM_COLOR: always

concurrency:
  # each new commit to a PR runs this workflow
  # so we need to avoid a long running older one from overwriting the 'pr-<number>-latest'
  group: "${{ github.workflow }} @ ${{ github.ref_name }}"
  cancel-in-progress: true

jobs:
  changes:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      code: ${{ steps.filter.outputs.code }}
    steps:
      - name: Checkout
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579

      - name: Check if we actually made changes
        uses: dorny/paths-filter@b2feaf19c27470162a626bd6fa8438ae5b263721
        id: filter
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: .github/file-filters.yml

  cargo-build:
    name: Cargo build
    runs-on: ubuntu-latest
    needs:
      - changes
    if: |
      (github.event_name == 'pull_request' && needs.changes.outputs.code == 'true')
    steps:
      - uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579

      - name: Set up toolchain
        shell: bash
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain none --profile minimal -y

          # invoking this actually sets up the toolchain as per rust-toolchain.toml
          cargo --version

      - name: Cache dependencies
        uses: actions/cache@937d24475381cd9c75ae6db12cb4e79714b926ed
        env:
          CACHE_NAME: cargo-cache-dependencies
        with:
          path: |
            ~/.cargo
            ./target
          key: ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-cargobuild
          restore-keys: |
            ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-
            ${{ runner.os }}-build-${{ env.CACHE_NAME }}-

      - name: Cargo build
        uses: actions-rs/cargo@844f36862e911db73fe0815f00a4a2602c279505
        with:
          command: build
          args: --verbose

  cargo-fmt:
    name: Cargo fmt
    runs-on: ubuntu-latest
    needs:
      - changes
    if: |
      (github.event_name == 'pull_request' && needs.changes.outputs.code == 'true')
    steps:
      - uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579

      - name: Set up toolchain
        shell: bash
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain none --profile minimal -y

          # invoking this actually sets up the toolchain as per rust-toolchain.toml
          cargo --version

      - name: Cache dependencies
        uses: actions/cache@937d24475381cd9c75ae6db12cb4e79714b926ed
        env:
          CACHE_NAME: cargo-cache-dependencies
        with:
          path: |
            ~/.cargo
            ./target
          key: ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-cargofmt
          restore-keys: |
            ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-
            ${{ runner.os }}-build-${{ env.CACHE_NAME }}-

      - name: Cargo fmt
        uses: actions-rs/cargo@844f36862e911db73fe0815f00a4a2602c279505
        with:
          command: fmt
          args: --all -- --check --verbose

  cargo-test-and-report:
    name: Cargo test (and report)
    runs-on: ubuntu-latest
    needs:
      - changes
    if: |
      (needs.changes.outputs.code == 'true')
    steps:
      - uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579

      - name: Set up toolchain
        shell: bash
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain none --profile minimal -y

          # invoking this actually sets up the toolchain as per rust-toolchain.toml
          cargo --version

      - name: Cache dependencies
        uses: actions/cache@937d24475381cd9c75ae6db12cb4e79714b926ed
        env:
          CACHE_NAME: cargo-cache-dependencies
        with:
          path: |
            ~/.cargo
            ./target
          key: ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-cargotest
          restore-keys: |
            ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-
            ${{ runner.os }}-build-${{ env.CACHE_NAME }}-

      - name: Install tarpaulin for coverage checking
        run: |
          cargo install --locked cargo-tarpaulin;

      - name: Install cargo2junit for formatting
        run: |
          cargo install cargo2junit;

      - name: Setup Node.js
        uses: actions/setup-node@04c56d2f954f1e4c69436aa54cfef261a018f458
        with:
          node-version: "lts/*"
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Install dependencies
        shell: bash
        run: |
          npm ci --ignore-scripts

      - name: Download tarpulin tar, extract, and add folder to path
        uses: actions/github-script@441359b1a30438de65712c2fbca0abe4816fa667
        with:
          script: |
            const tc = require("@actions/tool-cache");

            const release = await github.rest.repos.getLatestRelease({
                owner: "xd009642",
                repo: "tarpaulin"
            });

            const asset = release.data.assets.find(asset => {
                return asset["content_type"] === "application/gzip" && asset.name === `cargo-tarpaulin-${release.data.tag_name}-travis.tar.gz`;
            });

            const urlToTarpualinTar = asset.browser_download_url;

            const tarpaulinTarPath = await tc.downloadTool(urlToTarpualinTar);
            const tarpaulinExtractedFolder = await tc.extractTar(tarpaulinTarPath, null, ["--extract", "--gzip"]);

            core.addPath(tarpaulinExtractedFolder);

      - name: Run tarpaulin
        run: |
          cargo tarpaulin --run-types AllTargets --output-dir reports --out Lcov --workspace --no-fail-fast --all-features -- -Z unstable-options --format json --report-time | cargo2junit > reports/result.xml;
        continue-on-error: true

      - name: Upload test results
        uses: EnricoMi/publish-unit-test-result-action@dc4b2f22e07d0995dffe65daf902598f695e8827
        with:
          check_name: Test Results
          github_token: ${{ secrets.GITHUB_TOKEN }}
          files: reports/result.xml

      - name: Upload to CodeCov
        uses: codecov/codecov-action@f32b3a3741e1053eb607407145bc9619351dc93b
        with:
          # # required for private repositories:
          # token: ${{ secrets.CODECOV_TOKEN }}
          directory: reports
          fail_ci_if_error: true

  cargo-clippy-and-report:
    name: Cargo clippy (and report)
    runs-on: ubuntu-latest
    needs:
      - changes
    if: |
      (needs.changes.outputs.code == 'true')
    steps:
      - uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579

      - name: Set up toolchain
        shell: bash
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain none --profile minimal -y

          # invoking this actually sets up the toolchain as per rust-toolchain.toml
          cargo --version

      - name: Cache dependencies
        uses: actions/cache@937d24475381cd9c75ae6db12cb4e79714b926ed
        env:
          CACHE_NAME: cargo-cache-dependencies
        with:
          path: |
            ~/.cargo
            ./target
          key: ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-cargoclippy
          restore-keys: |
            ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-
            ${{ runner.os }}-build-${{ env.CACHE_NAME }}-

      - uses: actions-rs/clippy-check@b5b5f21f4797c02da247df37026fcd0a5024aa4d
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --workspace --all-targets --all-features -- --deny clippy::all --warn clippy::pedantic --warn clippy::cargo
          name: Clippy report

      # TODO upload clippy report for progress

  all-done:
    name: All done
    # this is the job that should be marked as required on GitHub. It's the only one that'll reliably trigger
    # when any upstream fails: success
    # when all upstream skips: pass
    # when all upstream success: success
    # combination of upstream skip and success: success
    runs-on: ubuntu-latest
    needs:
      - cargo-build
      - cargo-fmt
      - cargo-test-and-report
      - cargo-clippy-and-report
    if: ${{ !failure() }}
    steps:
      - run: |
          echo "Great success!"
